/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_EXAMPLES_E03_METHODS_HPP_
#define V1_COMMONAPI_EXAMPLES_E03_METHODS_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {
namespace examples {

class E03Methods {
public:
    virtual ~E03Methods() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct stdErrorTypeEnum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            NO_FAULT = 0,
            MY_FAULT = 1
        };
    
        stdErrorTypeEnum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::NO_FAULT)) {}
        stdErrorTypeEnum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::NO_FAULT):
                case static_cast< uint8_t>(Literal::MY_FAULT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const stdErrorTypeEnum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const stdErrorTypeEnum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const stdErrorTypeEnum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const stdErrorTypeEnum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const stdErrorTypeEnum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const stdErrorTypeEnum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::NO_FAULT): return "NO_FAULT";
            case static_cast< uint8_t>(Literal::MY_FAULT): return "MY_FAULT";
            default: return "UNDEFINED";
            }
        }
    };
};

const char* E03Methods::getInterface() {
    return ("commonapi.examples.E03Methods:v1_2");
}

CommonAPI::Version E03Methods::getInterfaceVersion() {
    return CommonAPI::Version(1, 2);
}


} // namespace examples
} // namespace commonapi
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_2 = v1;

#endif // V1_COMMONAPI_EXAMPLES_E03_METHODS_HPP_
